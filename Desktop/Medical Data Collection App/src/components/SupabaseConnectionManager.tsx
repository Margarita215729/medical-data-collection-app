import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Alert, AlertDescription } from './ui/alert';
import { Badge } from './ui/badge';
import { testSupabaseConnection } from '../utils/test-supabase';
import { Loader2, CheckCircle, XCircle, Settings, RefreshCw, Database, Key, Globe } from 'lucide-react';

interface SupabaseConnectionManagerProps {
  onConnectionSuccess: (projectId: string, anonKey: string) => void;
  onClose?: () => void;
}

export function SupabaseConnectionManager({ onConnectionSuccess, onClose }: SupabaseConnectionManagerProps) {
  const [projectId, setProjectId] = useState('');
  const [anonKey, setAnonKey] = useState('');
  const [serviceRoleKey, setServiceRoleKey] = useState('');
  const [testing, setTesting] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');
  const [errorMessage, setErrorMessage] = useState('');
  const [showAdvanced, setShowAdvanced] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  useEffect(() => {
    const loadCurrentSettings = async () => {
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const { projectId: currentProjectId, publicAnonKey } = await import('../utils/supabase/info');
        if (currentProjectId && publicAnonKey) {
          setProjectId(currentProjectId);
          setAnonKey(publicAnonKey);
        }
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
      }
    };
    
    loadCurrentSettings();
  }, []);

  const testConnection = async (testProjectId: string, testAnonKey: string) => {
    setTesting(true);
    setConnectionStatus('testing');
    setErrorMessage('');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
      if (!testProjectId || !testAnonKey) {
        throw new Error('Project ID –∏ Anon Key –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }

      if (!testProjectId.match(/^[a-zA-Z0-9]+$/)) {
        throw new Error('Project ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã');
      }

      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', `https://${testProjectId}.supabase.co`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const connectionOk = await testSupabaseConnection(testProjectId, testAnonKey);
      
      if (!connectionOk) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.');
      }

      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
      setConnectionStatus('success');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Å–ø–µ—Ö–∞
      setTimeout(() => {
        onConnectionSuccess(testProjectId, testAnonKey);
      }, 1000);

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      setConnectionStatus('error');
      setErrorMessage(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    } finally {
      setTesting(false);
    }
  };

  const handleConnect = () => {
    testConnection(projectId, anonKey);
  };

  const handleRetestCurrent = () => {
    if (projectId && anonKey) {
      testConnection(projectId, anonKey);
    }
  };

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case 'testing':
        return <Loader2 className="h-4 w-4 animate-spin text-blue-500" />;
      case 'success':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />;
      default:
        return <Database className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusText = () => {
    switch (connectionStatus) {
      case 'testing':
        return '–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case 'success':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!';
      case 'error':
        return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      default:
        return '–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é';
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader className="text-center">
          <div className="flex items-center justify-center space-x-2 mb-2">
            <Database className="h-6 w-6 text-blue-600" />
            <CardTitle>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase</CardTitle>
          </div>
          <CardDescription>
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          <div className="flex items-center justify-between p-4 bg-slate-50 rounded-lg">
            <div className="flex items-center space-x-3">
              {getStatusIcon()}
              <span className="text-sm font-medium">{getStatusText()}</span>
            </div>
            <Badge variant={connectionStatus === 'success' ? 'default' : connectionStatus === 'error' ? 'destructive' : 'secondary'}>
              {connectionStatus === 'idle' ? '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' : 
               connectionStatus === 'testing' ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' :
               connectionStatus === 'success' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—à–∏–±–∫–∞'}
            </Badge>
          </div>

          {/* –§–æ—Ä–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="projectId" className="flex items-center space-x-2">
                <Globe className="h-4 w-4" />
                <span>Project ID</span>
              </Label>
              <Input
                id="projectId"
                type="text"
                placeholder="–≤–∞—à-project-id"
                value={projectId}
                onChange={(e) => setProjectId(e.target.value.trim())}
                disabled={testing}
              />
              <p className="text-xs text-slate-600">
                –ù–∞–π–¥–∏—Ç–µ –≤ URL –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: https://–≤–∞—à-project-id.supabase.co
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="anonKey" className="flex items-center space-x-2">
                <Key className="h-4 w-4" />
                <span>Anon Key (Public)</span>
              </Label>
              <Input
                id="anonKey"
                type="password"
                placeholder="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                value={anonKey}
                onChange={(e) => setAnonKey(e.target.value.trim())}
                disabled={testing}
              />
              <p className="text-xs text-slate-600">
                –ù–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞: Settings ‚Üí API ‚Üí Project API keys ‚Üí anon public
              </p>
            </div>

            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <div className="space-y-4">
              <button
                type="button"
                onClick={() => setShowAdvanced(!showAdvanced)}
                className="flex items-center space-x-2 text-sm text-slate-600 hover:text-slate-900"
              >
                <Settings className="h-4 w-4" />
                <span>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</span>
              </button>

              {showAdvanced && (
                <div className="space-y-4 border-l-2 border-slate-200 pl-4">
                  <div className="space-y-2">
                    <Label htmlFor="serviceRoleKey">Service Role Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                    <Input
                      id="serviceRoleKey"
                      type="password"
                      placeholder="–¢–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
                      value={serviceRoleKey}
                      onChange={(e) => setServiceRoleKey(e.target.value.trim())}
                      disabled={testing}
                    />
                    <p className="text-xs text-slate-600">
                      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
          {errorMessage && connectionStatus === 'error' && (
            <Alert variant="destructive">
              <XCircle className="h-4 w-4" />
              <AlertDescription>
                {errorMessage}
              </AlertDescription>
            </Alert>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex space-x-3">
            <Button
              onClick={handleConnect}
              disabled={testing || !projectId || !anonKey}
              className="flex-1"
            >
              {testing ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...
                </>
              ) : (
                <>
                  <CheckCircle className="h-4 w-4 mr-2" />
                  –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                </>
              )}
            </Button>

            {projectId && anonKey && (
              <Button
                variant="outline"
                onClick={handleRetestCurrent}
                disabled={testing}
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                –ü–µ—Ä–µ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            )}

            {onClose && (
              <Button
                variant="ghost"
                onClick={onClose}
                disabled={testing}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            )}
          </div>

          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="text-sm font-medium text-blue-900 mb-2">–ì–¥–µ –Ω–∞–π—Ç–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Supabase:</h4>
            <ol className="text-xs text-blue-800 space-y-1 list-decimal list-inside">
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞ supabase.com</li>
              <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí API</li>
              <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ Project URL (–∏–∑ –Ω–µ–≥–æ –≤–æ–∑—å–º–∏—Ç–µ project-id)</li>
              <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ anon public key –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "Project API keys"</li>
            </ol>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}