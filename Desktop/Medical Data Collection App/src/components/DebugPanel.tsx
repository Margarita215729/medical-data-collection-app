import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { RefreshCw, Database, Server, Users, AlertTriangle } from 'lucide-react';
import { testSupabaseConnection, testLoginAccounts } from '../utils/test-supabase';
import { projectId, publicAnonKey } from '../utils/supabase/info';

interface DebugPanelProps {
  onConnectionTest?: (success: boolean) => void;
}

export function DebugPanel({ onConnectionTest }: DebugPanelProps) {
  const [testing, setTesting] = useState(false);
  const [lastTestResults, setLastTestResults] = useState<{
    connection: boolean | null;
    accounts: boolean | null;
    timestamp: Date | null;
  }>({
    connection: null,
    accounts: null,
    timestamp: null
  });

  const runFullTest = async () => {
    setTesting(true);
    console.log('üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    try {
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connectionOk = await testSupabaseConnection();
      
      // –¢–µ—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      const accountsOk = await testLoginAccounts();
      
      const results = {
        connection: connectionOk,
        accounts: accountsOk,
        timestamp: new Date()
      };
      
      setLastTestResults(results);
      
      if (onConnectionTest) {
        onConnectionTest(connectionOk && accountsOk);
      }
      
      console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', results);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
      setLastTestResults({
        connection: false,
        accounts: false,
        timestamp: new Date()
      });
    } finally {
      setTesting(false);
    }
  };

  const getStatusBadge = (status: boolean | null) => {
    if (status === null) return <Badge variant="secondary">–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ</Badge>;
    if (status === true) return <Badge variant="default" className="bg-green-500 text-white">‚úÖ OK</Badge>;
    return <Badge variant="destructive">‚ùå –û—à–∏–±–∫–∞</Badge>;
  };

  return (
    <Card className="w-full max-w-2xl mx-auto mt-6">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <AlertTriangle className="h-5 w-5 text-orange-500" />
          <span>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</span>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ */}
        <div className="space-y-2">
          <h4 className="text-sm font-medium">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase:</h4>
          <div className="bg-slate-50 p-3 rounded text-xs space-y-1">
            <div><strong>Project ID:</strong> {projectId}</div>
            <div><strong>URL:</strong> https://{projectId}.supabase.co</div>
            <div><strong>Anon Key:</strong> {publicAnonKey.substring(0, 50)}...</div>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
        {lastTestResults.timestamp && (
          <div className="space-y-3">
            <h4 className="text-sm font-medium">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ ({lastTestResults.timestamp.toLocaleTimeString()}):
            </h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div className="flex items-center justify-between p-3 bg-slate-50 rounded">
                <div className="flex items-center space-x-2">
                  <Database className="h-4 w-4" />
                  <span className="text-sm">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase</span>
                </div>
                {getStatusBadge(lastTestResults.connection)}
              </div>
              
              <div className="flex items-center justify-between p-3 bg-slate-50 rounded">
                <div className="flex items-center space-x-2">
                  <Users className="h-4 w-4" />
                  <span className="text-sm">–¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</span>
                </div>
                {getStatusBadge(lastTestResults.accounts)}
              </div>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <Button
          onClick={runFullTest}
          disabled={testing}
          className="w-full"
          variant="outline"
        >
          <RefreshCw className={`h-4 w-4 mr-2 ${testing ? 'animate-spin' : ''}`} />
          {testing ? '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É'}
        </Button>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="text-xs text-slate-600 space-y-1">
          <p><strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.</p>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö.</p>
        </div>
      </CardContent>
    </Card>
  );
}